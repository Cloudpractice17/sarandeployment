version: 0.2

phases:
    install:
        commands:
             - echo running the pipeline 
             
    pre_build:
        commands:
            ### Login to Amazon ECR
             - echo Logging in to Amazon ECR...
             - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            ### Pulling the image
             - echo Building image of dotnet from github code and print image_reponame
             - echo $IMAGE_REPO_NAME
             - docker build -t $IMAGE_REPO_NAME . 
             
            ### Creating the ECR repository
            ### - aws ecr describe-repositories --repository-names ${IMAGE_REPO_NAME} || aws ecr create-repository --repository-name ${IMAGE_REPO_NAME}
    build:
        commands:
            ### Building the image 
             - echo Build started on `date`
             - echo ecrimage $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
             - docker tag $IMAGE_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
             - echo Build completed on `date`
    post_build:
        commands:
            ### Publish the docker image to ECR
            - echo Pushing the Docker image...
            - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            - echo write definitions file...
            - printf '[{"name":"dotnetapppipeline","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG> imagedefinitions.json
artifacts:
    files: imagedefinitions.json        
